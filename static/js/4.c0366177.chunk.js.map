{"version":3,"sources":["service/db/addMessage.ts","service/db/getDialogPath.ts","service/db/createDialog.ts","components/Chat/userListItem.tsx","components/Chat/UsersList.tsx","service/time/timeStringMaker.ts","components/Chat/MessageItem.tsx","components/Chat/MessageForm.tsx","components/Chat/PersonalChat.tsx","service/db/getDialog.ts","components/Chat/index.tsx"],"names":["addMessage","message","db","store","getDB","path","getDialogPath","addDoc","collection","user","getCurrentUser","currentUserID","uid","opponent","getCurrentOpponent","opponentId","id","usersDBRef","dialogDoc","query","where","getDocs","then","res","filteredDialogs","docs","filter","item","data","members","includes","length","setDialogPath","split","initMessage","author","getUsersInfo","name","time","Date","now","createDialog","useStyles","makeStyles","userListItem","display","alignItems","width","height","marginBottom","paddingLeft","backgroundColor","borderRadius","color","imageBox","minWidth","overflow","marginRight","UserListItem","observer","props","photoUrl","classes","Box","className","onClick","unsubscribe","getUnsubscribeDialog","setCurrentOpponent","src","join","alt","usersList","padding","UsersList","currentUser","useState","loadAllUsers","setLoadAllUsers","localUsers","setLocalUsers","useEffect","q","onSnapshot","querySnapshot","appUsers","forEach","push","sort","a","b","Number","lastActivity","map","todayTimeTemplate","hour","minute","second","notTodayTimeTemplate","weekday","messageTime","timeTemplate","toLocaleTimeString","dayText","Math","abs","getDate","messageContainer","maxWidth","messageItem","flexDirection","fontWeight","MessageItem","alignSelf","bgcolor","messageForm","margin","resize","fontFamily","sendMessage","messagesPanel","flexGrow","MessageForm","inputString","toJS","onSubmit","e","preventDefault","textarea","target","elements","value","trim","onKeyDown","code","disabled","dialog","maxLength","placeholder","type","personalChat","paddingRight","PersonalChat","getDialog","dialogPath","ref","useRef","arr","doc","setDialog","setUnsubscribeDialog","current","scrollToBottom","autoHide","autoHideTimeout","autoHideDuration","style","bbox","outerGrid","innerGrid","Index","Grid","container","xs"],"mappings":"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","file":"static/js/4.c0366177.chunk.js","sourcesContent":["import { collection, addDoc } from 'firebase/firestore'\nimport store from '../../store/store'\nimport { IMessage } from '../../types/types'\n\nexport const addMessage = (message: IMessage): void => {\n    const db = store.getDB\n    const path = store.getDialogPath\n    if (db) {\n        addDoc(collection(db, path), message)\n    }\n}\n","import { collection, getDocs, query, where } from 'firebase/firestore'\nimport store from '../../store/store'\nimport { createDialog } from './createDialog'\n\nexport const getDialogPath = (): void => {\n    const user = store.getCurrentUser()\n    const currentUserID = user?.uid\n    const opponent = store.getCurrentOpponent\n    const opponentId = store.getCurrentOpponent?.id\n\n    const db = store.getDB\n    if (user && db && opponent) {\n        const usersDBRef = collection(db, 'dialogs')\n        const dialogDoc = query(\n            usersDBRef,\n            where('members', 'array-contains', currentUserID)\n        )\n        getDocs(dialogDoc).then((res) => {\n            const filteredDialogs = res.docs.filter((item) =>\n                item.data().members.includes(opponentId)\n            )\n            if (filteredDialogs.length < 1) {\n                createDialog(db, currentUserID, opponent?.id)\n            }\n            if (filteredDialogs.length > 0)\n                store.setDialogPath(filteredDialogs[0].id)\n        })\n    }\n}\n","import { collection, addDoc } from 'firebase/firestore'\nimport { Firestore } from '@firebase/firestore'\nimport store from '../../store/store'\nimport { addMessage } from './addMessage'\nimport { IMessage } from '../../types/types'\n\nexport const createDialog = (\n    db: Firestore,\n    currentUserID: string | undefined,\n    opponentId: string | null\n): Promise<void> => {\n    return addDoc(collection(db, 'dialogs'), {\n        members: [currentUserID, opponentId],\n    }).then((res) => {\n        store.setDialogPath(res.path.split('/')[1])\n        const initMessage: IMessage = {\n            author: 'root',\n            message: `${\n                store.getUsersInfo.name ? store.getUsersInfo.name : 'You'\n            } started the dialog`,\n            time: Date.now(),\n        }\n        addMessage(initMessage)\n    })\n}\n","import React from 'react'\nimport { observer } from 'mobx-react-lite'\nimport { makeStyles } from '@material-ui/styles'\nimport Box from '@material-ui/core/Box'\nimport store from '../../store/store'\nimport { getDialogPath } from '../../service/db/getDialogPath'\nimport { IUser } from '../../types/types'\n\ninterface IUserListItemComponent {\n    user: IUser\n}\n\nconst useStyles = makeStyles(() => ({\n    userListItem: {\n        display: 'flex',\n        alignItems: 'center',\n        width: '90%',\n        height: '70px',\n        marginBottom: '5px',\n        paddingLeft: '5px',\n        backgroundColor: '#263238',\n        borderRadius: '10px',\n        color: '#fff',\n    },\n    imageBox: {\n        width: '50px',\n        height: '50px',\n        minWidth: '50px',\n        borderRadius: '50%',\n        overflow: 'hidden',\n        marginRight: '20px',\n        '& img': {\n            width: '50px',\n            height: '50px',\n        },\n    },\n}))\n\nconst UserListItem: React.FC<IUserListItemComponent> = observer((props) => {\n    const { name, photoUrl } = props.user\n    const classes = useStyles()\n\n    const onClickHandler = () => {\n        const unsubscribe = store.getUnsubscribeDialog\n        if (unsubscribe) unsubscribe()\n        store.setCurrentOpponent(props.user)\n        getDialogPath()\n    }\n\n    return (\n        <Box className={classes.userListItem} onClick={onClickHandler}>\n            <Box className={classes.imageBox}>\n                <img\n                    src={\n                        photoUrl\n                            ? photoUrl\n                            : `https://eu.ui-avatars.com/api/?background=0D8ABC&color=fff&name=${name\n                                  .split(' ')\n                                  .join('+')}`\n                    }\n                    alt=\"user_photo\"\n                />\n            </Box>\n            <Box>{name}</Box>\n        </Box>\n    )\n})\n\nexport default UserListItem\n","import React, { useEffect, useState } from 'react'\nimport Box from '@material-ui/core/Box'\nimport { Scrollbars } from 'react-custom-scrollbars-2'\nimport { makeStyles } from '@material-ui/styles'\nimport { observer } from 'mobx-react-lite'\nimport { collection, onSnapshot, query } from 'firebase/firestore'\nimport store from '../../store/store'\nimport UserListItem from './userListItem'\nimport { IUser } from '../../types/types'\n\nconst useStyles = makeStyles({\n    usersList: {\n        width: '100%',\n        height: '80%',\n        padding: ' 0 5px',\n        overflow: 'overlay',\n    },\n})\n\nconst UsersList: React.FC = observer(() => {\n    const currentUser = store.getCurrentUser()\n    const [loadAllUsers, setLoadAllUsers] = useState(false)\n    const [localUsers, setLocalUsers] = useState<IUser[]>([])\n    const classes = useStyles()\n    const db = store.getDB\n\n    useEffect(() => {\n        if (db) {\n            setLoadAllUsers(true)\n            const q = query(collection(db, 'users'))\n            onSnapshot(q, (querySnapshot) => {\n                const appUsers: IUser[] = []\n                querySnapshot.forEach((item) => {\n                    if (currentUser && currentUser.uid !== item.data().id)\n                        appUsers.push(item.data() as IUser)\n                })\n                setLocalUsers([\n                    ...appUsers.sort(\n                        (a, b) =>\n                            Number(b.lastActivity) - Number(a.lastActivity)\n                    ),\n                ])\n                setLoadAllUsers(false)\n            })\n        }\n    }, [db, currentUser])\n\n    if (loadAllUsers) return <>loading...</>\n\n    return (\n        <Box className={classes.usersList}>\n            <Scrollbars className={classes.usersList}>\n                {localUsers.map((user) => (\n                    <UserListItem key={user.name} user={user} />\n                ))}\n            </Scrollbars>\n        </Box>\n    )\n})\n\nexport default UsersList\n","const todayTimeTemplate = {\n    hour: 'numeric',\n    minute: '2-digit',\n    second: '2-digit',\n}\n\nconst notTodayTimeTemplate = {\n    weekday: 'short',\n    hour: 'numeric',\n    minute: '2-digit',\n}\n\nconst messageTime = (\n    time: number,\n    timeTemplate: Intl.DateTimeFormatOptions\n): string => {\n    return new Date(time).toLocaleTimeString('en-GB', timeTemplate)\n}\n\nconst dayText = (time: number): string => {\n    if (\n        [1, 30, 29].includes(\n            Math.abs(\n                Number(new Date().getDate()) - Number(new Date(time).getDate())\n            )\n        )\n    ) {\n        return 'yesterday'\n    }\n    if (Number(new Date().getDate()) - Number(new Date(time).getDate()) === 0) {\n        return 'today'\n    }\n    return ''\n}\n\nexport const makeTimeString = (time: number): string => {\n    if (Number(new Date().getDate()) - Number(new Date(time).getDate()) === 0) {\n        return `${dayText(time)} ${messageTime(\n            time,\n            todayTimeTemplate as Intl.DateTimeFormatOptions\n        )}`\n    }\n    return `${dayText(time)} ${messageTime(\n        time,\n        notTodayTimeTemplate as Intl.DateTimeFormatOptions\n    )}`\n}\n","import React from 'react'\nimport Box from '@material-ui/core/Box'\nimport { makeStyles } from '@material-ui/styles'\nimport { observer } from 'mobx-react-lite'\nimport { IMessage } from '../../types/types'\nimport store from '../../store/store'\nimport { makeTimeString } from '../../service/time/timeStringMaker'\n\ninterface IMessageItem {\n    message: IMessage\n}\n\nconst useStyles = makeStyles(() => ({\n    messageContainer: {\n        display: 'flex',\n        maxWidth: '80%',\n    },\n    messageItem: {\n        display: 'flex',\n        flexDirection: 'column',\n        width: 'max-content',\n        marginBottom: '5px',\n        padding: '10px',\n        // backgroundColor: '#263238',\n        borderRadius: '10px',\n        color: '#fff',\n    },\n    name: {\n        fontWeight: 600,\n    },\n    message: {\n        color: '#EEEEEE',\n    },\n    imageBox: {\n        width: '50px',\n        height: '50px',\n        minWidth: '50px',\n        borderRadius: '50%',\n        overflow: 'hidden',\n        marginRight: '20px',\n        '& img': {\n            width: '50px',\n            height: '50px',\n        },\n    },\n}))\n\nconst MessageItem: React.FC<IMessageItem> = observer((props) => {\n    const { message } = props\n    const opponent = store.getCurrentOpponent\n    const classes = useStyles()\n\n    return (\n        <Box\n            className={classes.messageContainer}\n            alignSelf={\n                message.author === store.getUsersInfo.name\n                    ? 'flex-end'\n                    : message.author === 'root'\n                    ? 'center'\n                    : ''\n            }\n        >\n            {message.author === opponent?.name && (\n                <Box className={classes.imageBox}>\n                    <img\n                        src={\n                            opponent?.photoUrl\n                                ? opponent.photoUrl\n                                : `https://eu.ui-avatars.com/api/?background=0D8ABC&color=fff&name=${opponent?.name\n                                      .split(' ')\n                                      .join('+')}`\n                        }\n                        alt=\"user_photo\"\n                    />\n                </Box>\n            )}\n            <Box\n                bgcolor={\n                    message.author === store.getUsersInfo.name\n                        ? '#263238'\n                        : '#37474F'\n                }\n                className={classes.messageItem}\n            >\n                <Box className={classes.name}>\n                    {message.author === 'root' ? '' : message.author}\n                </Box>\n                <Box className={classes.message}>{message.message}</Box>\n                <Box alignSelf=\"flex-end\" color=\"#BDBDBD\">\n                    {makeTimeString(message.time)}\n                </Box>\n            </Box>\n        </Box>\n    )\n})\n\nexport default MessageItem\n","import React from 'react'\nimport { toJS } from 'mobx'\nimport { observer } from 'mobx-react-lite'\nimport { makeStyles } from '@material-ui/styles'\nimport Box from '@material-ui/core/Box'\nimport store from '../../store/store'\nimport { addMessage } from '../../service/db/addMessage'\n\nconst useStyles = makeStyles({\n    messageForm: {\n        display: 'flex',\n        flexDirection: 'column',\n        marginBottom: '10px',\n        '& textarea': {\n            width: '100%',\n            height: '100px',\n            margin: '0 0 5px 0',\n            padding: '5px',\n            borderRadius: '10px',\n            resize: 'none',\n            fontFamily: 'default',\n        },\n        '& button': {\n            width: '150px',\n            height: '40px',\n            alignSelf: 'flex-end',\n            borderRadius: '10px',\n            backgroundColor: '#09B83E',\n            '&:hover': {\n                backgroundColor: '#099336',\n            },\n        },\n    },\n    sendMessage: {\n        // justifySelf:'flex-end'\n    },\n    messagesPanel: {\n        display: 'flex',\n        flexDirection: 'column',\n        flexGrow: 1,\n    },\n})\n\nconst MessageForm: React.FC = observer(() => {\n    const classes = useStyles()\n    const sendMessage = (inputString: string): void => {\n        if (inputString) {\n            const message = {\n                author: toJS(store.getUsersInfo).name,\n                message: inputString,\n                time: Date.now(),\n            }\n            addMessage(message)\n        }\n    }\n    const onSubmitHandler = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n        const form = e.target as HTMLFormElement\n        const textarea = form.elements[0] as HTMLTextAreaElement\n        if (textarea) {\n            sendMessage(textarea.value.trim())\n            textarea.value = ''\n        }\n    }\n\n    const onEnterHandler = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n        if (e.code === 'Enter') {\n            e.preventDefault()\n            const textarea = e.target as HTMLTextAreaElement\n            sendMessage(textarea.value.trim())\n            textarea.value = ''\n        }\n    }\n    return (\n        <Box className={classes.sendMessage}>\n            <form className={classes.messageForm} onSubmit={onSubmitHandler}>\n                <textarea\n                    onKeyDown={onEnterHandler}\n                    disabled={!store.dialog.length}\n                    name=\"text\"\n                    id=\"text\"\n                    maxLength={500}\n                    placeholder=\" Message...\"\n                />\n                <button type=\"submit\" disabled={!store.dialog.length}>\n                    Send\n                </button>\n            </form>\n        </Box>\n    )\n})\n\nexport default MessageForm\n","import React, { useEffect, useRef } from 'react'\nimport Box from '@material-ui/core/Box'\nimport { Scrollbars } from 'react-custom-scrollbars-2'\nimport { makeStyles } from '@material-ui/styles'\nimport { observer } from 'mobx-react-lite'\nimport MessageItem from './MessageItem'\nimport store from '../../store/store'\nimport { getDialog } from '../../service/db/getDialog'\nimport MessageForm from './MessageForm'\nimport { IMessage } from '../../types/types'\n\nconst useStyles = makeStyles({\n    personalChat: {\n        width: '100%',\n        height: '100%',\n        display: 'flex',\n        flexDirection: 'column',\n        paddingLeft: '10px',\n        // overflow: 'overlay',\n    },\n    messageForm: {\n        display: 'flex',\n        flexDirection: 'column',\n        '& textarea': {\n            width: '100%',\n            height: '100px',\n            margin: '0 0 5px 0',\n            padding: '5px',\n            borderRadius: '10px',\n            resize: 'none',\n            fontFamily: 'default',\n        },\n        '& button': {\n            width: '150px',\n            height: '40px',\n            alignSelf: 'flex-end',\n            borderRadius: '10px',\n            backgroundColor: '#09B83E',\n            '&:hover': {\n                backgroundColor: '#099336',\n            },\n        },\n    },\n    sendMessage: {\n        // justifySelf:'flex-end'\n    },\n    messagesPanel: {\n        display: 'flex',\n        flexDirection: 'column',\n        overflow: 'overlay',\n        flexGrow: 1,\n        paddingRight: '20px',\n    },\n})\n\nconst PersonalChat: React.FC = observer(() => {\n    const dialog = store.getDialog\n    const dialogPath = store.getDialogPath\n    const classes = useStyles()\n    const ref = useRef<Scrollbars>(null)\n    const scrollDown = () => {\n        if (ref.current) {\n            ref.current.scrollToBottom()\n        }\n    }\n\n    useEffect(() => {\n        const db = store.getDB\n        const path = store.getDialogPath\n        if (db && path) {\n            getDialog(db, path)\n        }\n    }, [dialogPath])\n\n    useEffect(() => {\n        if (ref.current) {\n            scrollDown()\n        }\n    }, [dialog])\n\n    return (\n        /* eslint-disable jsx-a11y/click-events-have-key-events, jsx-a11y/no-noninteractive-element-interactions, jsx-a11y/no-static-element-interactions\n         */\n\n        <Box className={classes.personalChat}>\n            <Scrollbars\n                ref={ref}\n                autoHide\n                autoHideTimeout={1000}\n                autoHideDuration={200}\n            >\n                <div className={classes.messagesPanel}>\n                    {dialog.length > 0 ? (\n                        dialog.map((item) => (\n                            <MessageItem\n                                key={item.time}\n                                message={item as IMessage}\n                            />\n                        ))\n                    ) : (\n                        <div style={{ alignSelf: 'center' }}>\n                            Choose the dialog with someone\n                        </div>\n                    )}\n                </div>\n            </Scrollbars>\n            <Box className={classes.sendMessage}>\n                <MessageForm />\n            </Box>\n        </Box>\n    )\n})\n\nexport default PersonalChat\n","import { collection, query, onSnapshot } from 'firebase/firestore'\nimport { Firestore, Unsubscribe } from '@firebase/firestore'\nimport { IMessage } from '../../types/types'\nimport store from '../../store/store'\n\nexport const getDialog = (db: Firestore, dialogPath: string): void => {\n    const q = query(collection(db, dialogPath))\n    const unsubscribe: Unsubscribe = onSnapshot(q, (querySnapshot) => {\n        const arr: IMessage[] = []\n        querySnapshot.forEach((doc) => {\n            arr.push(doc.data() as IMessage)\n            arr.sort((a, b) => {\n                return a.time - b.time\n            })\n            store.setDialog(arr)\n        })\n    })\n    store.setUnsubscribeDialog(unsubscribe)\n}\n","import React from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport Box from '@material-ui/core/Box'\nimport { makeStyles } from '@material-ui/styles'\nimport UsersList from './UsersList'\nimport PersonalChat from './PersonalChat'\n\nconst useStyles = makeStyles({\n    bbox: {\n        height: '94%',\n    },\n    outerGrid: {\n        height: '100%',\n    },\n    innerGrid: {\n        height: '100%',\n        overflow: 'layout',\n    },\n})\n\nconst Index: React.FC = () => {\n    const classes = useStyles()\n    return (\n        <Box className={classes.bbox}>\n            <Grid container className={classes.outerGrid}>\n                <Grid className={classes.innerGrid} item xs={3}>\n                    <UsersList />\n                </Grid>\n                <Grid item xs={9} className={classes.innerGrid}>\n                    <PersonalChat />\n                </Grid>\n            </Grid>\n        </Box>\n    )\n}\n\nexport default Index\n"],"sourceRoot":""}