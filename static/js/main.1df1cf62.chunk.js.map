{"version":3,"sources":["store/store.ts","service/db/getChatPath.ts","service/db/getUsersInfoFromDB.ts","components/App/AppContainer.tsx","utils/consts.ts","service/db/updateUsersActivity.ts","components/EntryWindow/EmailPasswordLoginForm.tsx","service/db/createUser.ts","components/EntryWindow/AuthWithGoogle.tsx","components/EntryWindow/LoginTypeSeparator.tsx","components/EntryWindow/LoginPage.tsx","components/EntryWindow/EntryWindowContainer.tsx","components/EntryWindow/EmailPasswordRegistrationForm.tsx","service/db/uploadPhoto.ts","components/EntryWindow/RegistrationPage.tsx","components/EntryWindow/index.tsx","routes.ts","components/App/Header.tsx","components/Loader/Loader.tsx","components/App/AppRouter.tsx","components/App/index.tsx","index.tsx"],"names":["Store","auth","undefined","loginOrRegistration","db","usersInfo","name","photoUrl","id","lastActivity","user","currentOpponent","dialogPath","unsubscribeDialog","dialog","loading","storage","makeAutoObservable","this","autoBind","opponentInfo","store","loadingFromAuth","getDialog","unS","userInfo","path","getChatPath","getUsersInfoFromDB","a","getCurrentUser","getDB","usersDBRef","collection","userINFOQuery","query","where","uid","getDocs","result","empty","docs","data","useStyles","makeStyles","box_root","width","height","containerXYZ","margin","AppContainer","observer","children","classes","useAuthState","getCurrentAuth","useEffect","setCurrentUser","setStorage","getStorage","app","then","response","setUsersInfo","setLoading","Box","className","LOGIN_ROUTE","CHAT_ROUTE","REGISTRATION_ROUTE","updateUsersActivity","doc","usersDoc","updateDoc","Date","now","TicketForm","fontSize","InputItem","marginBottom","InputElement","fontFamily","padding","borderRadius","FormSubmit","textTransform","backgroundColor","color","fontWeight","EmailPasswordLoginForm","useState","errorOnServer","setErrorOnServer","initialValues","email","password","validationSchema","Yup","required","min","max","onSubmit","values","setSubmitting","signInWithEmailAndPassword","catch","error","message","setTimeout","formProps","Alert","severity","placeholder","type","errors","touched","Button","createUser","userFromEmailPassword","nameFromForm","photoURLFromForm","displayName","photoURL","meUsers","res","addDoc","root","singInButton","position","zIndex","top","left","content","AuthWithGoogle","props","login","onClick","provider","GoogleAuthProvider","signInWithPopup","variant","separatorContainer","display","justifyContent","alignItems","separatorline","flexGrow","borderTop","separatorText","LoginTypesSeparator","link","marginRight","float","header","textAlign","letterSpacing","LoginPage","Typography","href","centeredBox","transform","EntryWindowContainer","EmailPasswordRegistrationForm","myFile","setMyFile","passwordAgain","file","File","when","is","val","length","oneOf","createUserWithEmailAndPassword","getMyStorage","storageRef","ref","uploadBytes","uploadPhoto","uploadRes","imageRef","fullRef","fullPath","getDownloadURL","url","onChange","event","target","files","photo","RegistrationPage","EntryWindow","publicRoutes","Component","EntryPopup","privateRoutes","lazy","myButton","Header","getUsersInfo","history","useHistory","setLoginOrRegistration","push","signOut","userLogOut","Loader","AppRouter","getLoading","map","component","exact","to","Index","fallback","theme","createTheme","overrides","MuiCssBaseline","html","body","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","setCurrentAuth","getAuth","setDB","getFirestore","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","App","document","getElementById"],"mappings":"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","file":"static/js/main.1df1cf62.chunk.js","sourcesContent":["import { Auth } from '@firebase/auth'\nimport { makeAutoObservable } from 'mobx'\nimport { Firestore, Unsubscribe } from '@firebase/firestore'\nimport { FirebaseStorage } from 'firebase/storage'\nimport { UserImpl } from '@firebase/auth/internal'\nimport { getChatPath } from '../service/db/getChatPath'\nimport { IMessage, IUser } from '../types/types'\n\nclass Store {\n    auth: Auth | undefined = undefined\n\n    loginOrRegistration = false\n\n    db: Firestore | undefined = undefined\n\n    usersInfo: IUser = {\n        name: '',\n        photoUrl: '',\n        id: '',\n        lastActivity: null,\n    }\n\n    user: UserImpl | null = null\n\n    currentOpponent: IUser | null = null\n\n    dialogPath = ''\n\n    unsubscribeDialog: Unsubscribe | null = null\n\n    dialog: IMessage[] = []\n\n    loading = false\n\n    storage: FirebaseStorage | null = null\n\n    constructor() {\n        makeAutoObservable(this, {}, { autoBind: true })\n    }\n\n    userLogOut() {\n        this.currentOpponent = null\n        this.dialog = []\n        this.dialogPath = ''\n        this.usersInfo = {\n            name: '',\n            photoUrl: '',\n            id: '',\n            lastActivity: null,\n        }\n        this.loginOrRegistration = false\n    }\n\n    setCurrentOpponent(opponentInfo: IUser) {\n        this.currentOpponent = opponentInfo\n    }\n\n    get getCurrentOpponent() {\n        return this.currentOpponent\n    }\n\n    setStorage(store: FirebaseStorage) {\n        this.storage = store\n    }\n\n    get getMyStorage() {\n        return this.storage\n    }\n\n    setLoading(loadingFromAuth: boolean) {\n        this.loading = loadingFromAuth\n    }\n\n    get getLoading() {\n        return this.loading\n    }\n\n    setDialog(getDialog: IMessage[]) {\n        this.dialog = getDialog\n    }\n\n    get getDialog() {\n        return this.dialog\n    }\n\n    setUnsubscribeDialog(unS: Unsubscribe) {\n        this.unsubscribeDialog = unS\n    }\n\n    get getUnsubscribeDialog() {\n        return this.unsubscribeDialog\n    }\n\n    setUsersInfo(userInfo: IUser) {\n        this.usersInfo = userInfo\n    }\n\n    get getUsersInfo() {\n        return this.usersInfo\n    }\n\n    setDialogPath(path: string) {\n        this.dialogPath = getChatPath(path)\n    }\n\n    get getDialogPath() {\n        return this.dialogPath\n    }\n\n    setLoginOrRegistration() {\n        this.loginOrRegistration = !this.loginOrRegistration\n    }\n\n    setDB(db: Firestore) {\n        this.db = db\n    }\n\n    get getDB() {\n        return this.db\n    }\n\n    setCurrentUser(user: UserImpl) {\n        this.user = user\n    }\n\n    getCurrentUser() {\n        return this.user\n    }\n\n    getCurrentAuth() {\n        return this.auth\n    }\n\n    setCurrentAuth(auth: Auth | undefined) {\n        this.auth = auth\n    }\n}\n\nexport default new Store()\n","export const getChatPath = (path: string): string => {\n    return `dialogs/${path}/messages`\n}\n","import { collection, getDocs, query, where } from 'firebase/firestore'\nimport store from '../../store/store'\nimport { IUser } from '../../types/types'\n\nexport const getUsersInfoFromDB = async (): Promise<IUser> => {\n    const user = store.getCurrentUser()\n    const db = store.getDB\n    if (user && db) {\n        const usersDBRef = collection(db, 'users')\n        const userINFOQuery = query(usersDBRef, where('id', '==', user.uid))\n        const result = await getDocs(userINFOQuery)\n        if (result.empty) {\n            return {\n                name: '',\n                photoUrl: '',\n                id: '',\n                lastActivity: null,\n            }\n        }\n        return result.docs[0].data() as IUser\n    }\n    return {\n        name: 'Harry Potter',\n        photoUrl: '-1',\n        id: '-1',\n        lastActivity: -1,\n    }\n}\n","import React, { ReactChild, useEffect } from 'react'\nimport { observer } from 'mobx-react-lite'\nimport { makeStyles } from '@material-ui/styles'\nimport Box from '@material-ui/core/Box'\nimport { useAuthState } from 'react-firebase-hooks/auth'\nimport { getStorage, FirebaseStorage } from 'firebase/storage'\nimport store from '../../store/store'\nimport { getUsersInfoFromDB } from '../../service/db/getUsersInfoFromDB'\n\nconst useStyles = makeStyles({\n    box_root: {\n        width: '100%',\n        height: '100%',\n    },\n    containerXYZ: {\n        width: '90%',\n        margin: 'auto',\n        height: '100%',\n    },\n})\n\nconst AppContainer: React.FC = observer(({ children }) => {\n    const classes = useStyles()\n    const [user, loading] = useAuthState(store.getCurrentAuth())\n\n    useEffect(() => {\n        store.setCurrentUser(user)\n        store.setStorage(\n            getStorage(store.getCurrentAuth()?.app) as FirebaseStorage\n        )\n        getUsersInfoFromDB().then((response) => store.setUsersInfo(response))\n    }, [user?.uid, user])\n\n    store.setLoading(loading)\n\n    return (\n        <Box className={classes.box_root}>\n            <Box className={classes.containerXYZ}>{children as ReactChild}</Box>\n        </Box>\n    )\n})\nexport default AppContainer\n","export const LOGIN_ROUTE = '/firebase-chart/login'\nexport const CHAT_ROUTE = '/firebase-chart/chat'\nexport const REGISTRATION_ROUTE = '/firebase-chart/registration'\n","import {\n    collection,\n    doc,\n    getDocs,\n    query,\n    updateDoc,\n    where,\n} from 'firebase/firestore'\nimport store from '../../store/store'\n\n/* eslint consistent-return: off */\nexport const updateUsersActivity = async (): Promise<void> => {\n    const user = store.getCurrentUser()\n    const db = store.getDB\n    if (user && db) {\n        const usersDBRef = collection(db, 'users')\n        const userINFOQuery = query(usersDBRef, where('id', '==', user.uid))\n        const result = await getDocs(userINFOQuery)\n        const usersDoc = await doc(usersDBRef, result.docs[0].id)\n        await updateDoc(usersDoc, {\n            lastActivity: Date.now(),\n        })\n    }\n}\n","import React, { useState } from 'react'\nimport { signInWithEmailAndPassword } from 'firebase/auth'\nimport { observer } from 'mobx-react-lite'\nimport { Formik, Field, Form } from 'formik'\nimport * as Yup from 'yup'\nimport Box from '@material-ui/core/Box'\nimport { makeStyles } from '@material-ui/styles'\nimport Button from '@material-ui/core/Button'\nimport { Alert } from '@mui/material'\nimport store from '../../store/store'\nimport { updateUsersActivity } from '../../service/db/updateUsersActivity'\n\nconst useStyles = makeStyles({\n    TicketForm: {\n        margin: 'auto',\n        width: '90%',\n        fontSize: '1.5rem',\n    },\n    InputItem: {\n        marginBottom: '30px',\n    },\n    InputElement: {\n        width: '100%',\n        fontFamily: 'default',\n        '& input': {\n            marginBottom: '10px',\n            padding: '10px',\n            borderRadius: '5px',\n        },\n    },\n    FormSubmit: {\n        width: '100%',\n        marginBottom: '10px',\n        fontFamily: 'default',\n        padding: '5px',\n        textTransform: 'none',\n        backgroundColor: '#09af3b',\n        color: '#FAFAFA',\n        fontWeight: 600,\n        '&:hover': {\n            backgroundColor: '#089C35FF',\n        },\n    },\n})\n\nconst EmailPasswordLoginForm: React.FC = observer(() => {\n    const classes = useStyles()\n    const [errorOnServer, setErrorOnServer] = useState<boolean | string>(false)\n    return (\n        <Formik\n            initialValues={{\n                email: '',\n                password: '',\n            }}\n            validationSchema={Yup.object({\n                email: Yup.string()\n                    .email('Invalid email address')\n                    .required('Required'),\n                password: Yup.string()\n                    .min(5)\n                    .max(15, 'Must be 15 characters or less')\n                    .required('Required'),\n            })}\n            onSubmit={(values, { setSubmitting }) => {\n                const auth = store.getCurrentAuth()\n                if (auth)\n                    signInWithEmailAndPassword(\n                        auth,\n                        values.email,\n                        values.password\n                    )\n                        .then(() => {\n                            updateUsersActivity()\n                        })\n                        .catch((error) => {\n                            setErrorOnServer(error.message)\n                            setTimeout(() => {\n                                return setErrorOnServer(false)\n                            }, 10000)\n                        })\n                setTimeout(() => {\n                    setSubmitting(false)\n                }, 400)\n            }}\n        >\n            {(formProps) => (\n                <Form className={classes.TicketForm}>\n                    {errorOnServer ? (\n                        <Alert severity=\"warning\">{errorOnServer}</Alert>\n                    ) : null}\n                    <Box className={classes.InputElement}>\n                        <Field\n                            placeholder=\"Work Email\"\n                            name=\"email\"\n                            type=\"email\"\n                            className={classes.InputElement}\n                        />\n                        {formProps.errors.email && formProps.touched.email ? (\n                            <Alert severity=\"warning\">\n                                {formProps.errors.email}\n                            </Alert>\n                        ) : null}\n                    </Box>\n                    <Box className={classes.InputElement}>\n                        <Field\n                            placeholder=\"Password\"\n                            name=\"password\"\n                            type=\"password\"\n                            className={classes.InputElement}\n                        />\n                        {formProps.errors.password &&\n                        formProps.touched.password ? (\n                            <Alert severity=\"warning\">\n                                {formProps.errors.password}\n                            </Alert>\n                        ) : null}\n                    </Box>\n                    <Button type=\"submit\" className={classes.FormSubmit}>\n                        Sing In\n                    </Button>\n                </Form>\n            )}\n        </Formik>\n    )\n})\n\nexport default EmailPasswordLoginForm\n","import { collection, getDocs, addDoc, query, where } from 'firebase/firestore'\nimport store from '../../store/store'\nimport { IUser } from '../../types/types'\n\ninterface IUserFromEmailPassword {\n    nameFromForm: string\n    photoURLFromForm?: string\n    lastActivity?: number | null\n}\n\nexport const createUser = (\n    userFromEmailPassword: IUserFromEmailPassword = {\n        nameFromForm: '',\n        photoURLFromForm: '',\n        lastActivity: null,\n    }\n): void => {\n    const { nameFromForm, photoURLFromForm } = userFromEmailPassword\n    const user = store.getCurrentUser()\n    const db = store.getDB\n    if (user && db) {\n        const data = {\n            name: nameFromForm ? nameFromForm : user.displayName,\n            photoUrl: photoURLFromForm ? photoURLFromForm : user.photoURL,\n            id: user.uid,\n            lastActivity: Date.now(),\n        }\n        const usersDBRef = collection(db, 'users')\n        const meUsers = query(usersDBRef, where('id', '==', user?.uid))\n        getDocs(meUsers).then((res) => {\n            if (res.empty) {\n                addDoc(collection(db, 'users'), data)\n            }\n            store.setUsersInfo(data as IUser)\n        })\n    }\n}\n","import React from 'react'\nimport Box from '@material-ui/core/Box'\nimport Button from '@material-ui/core/Button'\nimport { makeStyles } from '@material-ui/styles'\nimport { GoogleAuthProvider, signInWithPopup } from '@firebase/auth'\nimport { observer } from 'mobx-react-lite'\nimport { createUser } from '../../service/db/createUser'\nimport store from '../../store/store'\nimport { updateUsersActivity } from '../../service/db/updateUsersActivity'\n\ninterface IAuthWithGoogle {\n    login: boolean\n}\n\nconst useStyles = makeStyles({\n    root: {\n        width: '90%',\n        margin: 'auto',\n    },\n    singInButton: {\n        position: 'relative',\n        width: '100%',\n        marginBottom: '30px',\n        fontFamily: 'default',\n        padding: '5px',\n        textTransform: 'none',\n        color: '#757575',\n        '&:before': {\n            position: 'absolute',\n            zIndex: -1,\n            top: '7px',\n            left: '7px',\n            width: '20px',\n            height: '20px',\n            content:\n                'url(\"https://api.iconify.design/logos/google-icon.svg?width=20&height=20\")',\n        },\n    },\n})\n\nconst AuthWithGoogle: React.FC<IAuthWithGoogle> = observer((props) => {\n    const { login } = props\n    const auth = store.getCurrentAuth()\n\n    const onClickHandler = () => {\n        if (auth) {\n            const provider = new GoogleAuthProvider()\n            signInWithPopup(auth, provider)\n                .then(() => createUser())\n                .then(() => updateUsersActivity())\n        }\n    }\n    const classes = useStyles()\n    return (\n        <Box className={classes.root}>\n            <Button\n                onClick={onClickHandler}\n                variant=\"outlined\"\n                className={classes.singInButton}\n            >\n                Sign{login ? ' In ' : ' Up '} with Google\n            </Button>\n        </Box>\n    )\n})\n\nexport default AuthWithGoogle\n","import React from 'react'\nimport { makeStyles } from '@material-ui/styles'\n\nconst useStyles = makeStyles({\n    separatorContainer: {\n        width: '100%',\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        marginBottom: '30px',\n    },\n    separatorline: {\n        height: '1px',\n        flexGrow: 1,\n        borderTop: '1px solid #9E9E9E',\n    },\n    separatorText: {\n        padding: '0 5px',\n        color: '#757575',\n        fontWeight: 600,\n    },\n})\n\nconst LoginTypesSeparator: React.FC = () => {\n    const classes = useStyles()\n    return (\n        <div className={classes.separatorContainer}>\n            <div className={classes.separatorline} />\n            <div className={classes.separatorText}>\n                <span>or</span>\n            </div>\n            <div className={classes.separatorline} />\n        </div>\n    )\n}\n\nexport default LoginTypesSeparator\n","import React from 'react'\nimport { makeStyles } from '@material-ui/styles'\nimport { Typography } from '@material-ui/core'\nimport EmailPasswordLoginForm from './EmailPasswordLoginForm'\nimport AuthWithGoogle from './AuthWithGoogle'\nimport LoginTypesSeparator from './LoginTypeSeparator'\n\nconst useStyles = makeStyles({\n    link: {\n        marginBottom: '30px',\n        fontFamily: 'default',\n        fontSize: '.7rem',\n        marginRight: '5%',\n        float: 'right',\n    },\n    header: {\n        marginBottom: '30px',\n        textAlign: 'center',\n        fontFamily: 'default',\n        '& span': {\n            letterSpacing: 'normal',\n        },\n        '& h4': {\n            margin: '10px 0',\n            fontWeight: 600,\n        },\n    },\n})\n\nconst LoginPage: React.FC = () => {\n    const classes = useStyles()\n    return (\n        <>\n            <div className={classes.header}>\n                <Typography variant=\"h4\">Harvest ID</Typography>\n                <span>\n                    Sing in to a <strong>Harvest</strong> or{' '}\n                    <strong>Forecast</strong> account\n                </span>\n            </div>\n            <AuthWithGoogle login />\n            <LoginTypesSeparator />\n            <EmailPasswordLoginForm />\n            <a className={classes.link} href=\"https://zapier.com/blog/better-memory/\">\n                Fogot your password?\n            </a>\n        </>\n    )\n}\n\nexport default LoginPage\n","import React, { ReactChildren } from 'react'\nimport Box from '@material-ui/core/Box'\nimport { makeStyles } from '@material-ui/styles'\n\nconst useStyles = makeStyles({\n    centeredBox: {\n        width: '450px',\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        backgroundColor: '#fff',\n        borderRadius: '5px',\n        // marginRight: '-50%',\n        padding: '10px 0',\n        transform: 'translate(-50%, -50%)',\n    },\n})\n\nconst EntryWindowContainer: React.FC = ({ children }) => {\n    const classes = useStyles()\n    return (\n        <Box className={classes.centeredBox}>{children as ReactChildren}</Box>\n    )\n}\n\nexport default EntryWindowContainer\n","import React, { useState } from 'react'\nimport { Formik, Field, Form } from 'formik'\nimport * as Yup from 'yup'\nimport { observer } from 'mobx-react-lite'\nimport Box from '@material-ui/core/Box'\nimport Button from '@material-ui/core/Button'\nimport { Alert } from '@mui/material'\nimport { makeStyles } from '@material-ui/styles'\nimport { createUserWithEmailAndPassword } from 'firebase/auth'\nimport { ref, getDownloadURL } from 'firebase/storage'\nimport store from '../../store/store'\nimport { createUser } from '../../service/db/createUser'\nimport { uploadPhoto } from '../../service/db/uploadPhoto'\n\nconst useStyles = makeStyles({\n    TicketForm: {\n        margin: 'auto',\n        width: '90%',\n        fontSize: '1.5rem',\n    },\n    InputItem: {\n        marginBottom: '30px',\n    },\n    InputElement: {\n        width: '100%',\n        fontFamily: 'default',\n        '& input': {\n            marginBottom: '10px',\n            padding: '10px',\n            borderRadius: '5px',\n        },\n    },\n    FormSubmit: {\n        width: '100%',\n        marginBottom: '10px',\n        fontFamily: 'default',\n        padding: '5px',\n        textTransform: 'none',\n        backgroundColor: '#09af3b',\n        color: '#FAFAFA',\n        fontWeight: 600,\n        '&:hover': {\n            backgroundColor: '#089C35FF',\n        },\n    },\n})\n\nconst EmailPasswordRegistrationForm: React.FC = observer(() => {\n    const classes = useStyles()\n    const [myFile, setMyFile] = useState<File | null>(null)\n    const [errorOnServer, setErrorOnServer] = useState<boolean | string>(false)\n    return (\n        <Formik\n            initialValues={{\n                name: '',\n                email: '',\n                password: '',\n                passwordAgain: '',\n                file: typeof File,\n            }}\n            validationSchema={Yup.object({\n                name: Yup.string().min(2).max(20),\n                email: Yup.string()\n                    .email('Invalid email address')\n                    .required('Required'),\n                password: Yup.string()\n                    .min(5)\n                    .max(15, 'Must be 15 characters or less')\n                    .required('Required'),\n                passwordAgain: Yup.string().when('password', {\n                    is: (val: string) => val && val.length > 0,\n                    then: Yup.string().oneOf(\n                        [Yup.ref('password')],\n                        'Both password need to be the same'\n                    ),\n                }),\n            })}\n            onSubmit={(values, { setSubmitting }) => {\n                const auth = store.getCurrentAuth()\n                if (auth)\n                    createUserWithEmailAndPassword(\n                        auth,\n                        values.email,\n                        values.password\n                    )\n                        .then(() => {\n                            if (myFile) {\n                                return uploadPhoto(myFile)\n                            }\n                            return undefined\n                        })\n                        .then((uploadRes) => {\n                            const imageRef = uploadRes?.ref\n                            const storage = store.getMyStorage\n                            if (storage) {\n                                const fullRef = ref(storage, imageRef?.fullPath)\n                                return getDownloadURL(fullRef)\n                            }\n                            return ''\n                        })\n                        .then((url) => {\n                            createUser({\n                                nameFromForm: values.name,\n                                photoURLFromForm: url ? url : '',\n                                lastActivity: Date.now(),\n                            })\n                        })\n                        .catch((error) => {\n                            setErrorOnServer(error.message)\n                            setTimeout(() => {\n                                return setErrorOnServer(false)\n                            }, 10000)\n                        })\n                setTimeout(() => {\n                    setSubmitting(false)\n                }, 400)\n            }}\n        >\n            {(formProps) => (\n                <Form className={classes.TicketForm}>\n                    {errorOnServer ? (\n                        <Alert severity=\"warning\">{errorOnServer}</Alert>\n                    ) : null}\n                    <Box className={classes.InputElement}>\n                        <Field\n                            placeholder=\"Name\"\n                            name=\"name\"\n                            type=\"text\"\n                            className={classes.InputElement}\n                        />\n                        {formProps.errors.name && formProps.touched.name ? (\n                            <Alert severity=\"warning\">\n                                {formProps.errors.name}\n                            </Alert>\n                        ) : null}\n                    </Box>\n                    <Box>\n                        <input\n                            type=\"file\"\n                            name=\"file\"\n                            onChange={(event) => {\n                                if (event.target.files?.length) {\n                                    const photo = event.target.files[0]\n                                    setMyFile(photo)\n                                }\n                            }}\n                        />\n                    </Box>\n                    <Box className={classes.InputElement}>\n                        <Field\n                            placeholder=\"Work Email\"\n                            name=\"email\"\n                            type=\"email\"\n                            className={classes.InputElement}\n                        />\n                        {formProps.errors.email && formProps.touched.email ? (\n                            <Alert severity=\"warning\">\n                                {formProps.errors.email}\n                            </Alert>\n                        ) : null}\n                    </Box>\n                    <Box className={classes.InputElement}>\n                        <Field\n                            placeholder=\"Password\"\n                            name=\"password\"\n                            type=\"password\"\n                            className={classes.InputElement}\n                        />\n                        {formProps.errors.password &&\n                        formProps.touched.password ? (\n                            <Alert severity=\"warning\">\n                                {formProps.errors.password}\n                            </Alert>\n                        ) : null}\n                    </Box>\n                    <Box className={classes.InputElement}>\n                        <Field\n                            placeholder=\"Confirm Password\"\n                            name=\"passwordAgain\"\n                            type=\"password\"\n                            className={classes.InputElement}\n                        />\n                        {formProps.errors.passwordAgain &&\n                        formProps.touched.passwordAgain ? (\n                            <Alert severity=\"warning\">\n                                {formProps.errors.passwordAgain}\n                            </Alert>\n                        ) : null}\n                    </Box>\n\n                    <Button type=\"submit\" className={classes.FormSubmit}>\n                        Sing Up\n                    </Button>\n                </Form>\n            )}\n        </Formik>\n    )\n})\n\nexport default EmailPasswordRegistrationForm\n","import { ref, uploadBytes, UploadResult } from 'firebase/storage'\nimport store from '../../store/store'\n\nexport const uploadPhoto = (file: File): Promise<UploadResult> | undefined => {\n    const storage = store.getMyStorage\n    if (storage) {\n        const storageRef = ref(storage, `users_photo/${file.name}`)\n        return uploadBytes(storageRef, file)\n    }\n    return undefined\n}\n","import React from 'react'\nimport { makeStyles } from '@material-ui/styles'\nimport { Typography } from '@material-ui/core'\nimport AuthWithGoogle from './AuthWithGoogle'\nimport LoginTypesSeparator from './LoginTypeSeparator'\nimport EmailPasswordRegistrationForm from './EmailPasswordRegistrationForm'\n\nconst useStyles = makeStyles({\n    link: {\n        marginBottom: '30px',\n        fontFamily: 'default',\n        fontSize: '.7rem',\n        marginRight: '5%',\n        float: 'right',\n    },\n    header: {\n        marginBottom: '30px',\n        textAlign: 'center',\n        fontFamily: 'default',\n        '& span': {\n            letterSpacing: 'normal',\n        },\n        '& h4': {\n            margin: '10px 0',\n            fontWeight: 600,\n        },\n    },\n})\n\nconst RegistrationPage: React.FC = () => {\n    const classes = useStyles()\n    return (\n        <>\n            <div className={classes.header}>\n                <Typography variant=\"h4\">Harvest ID</Typography>\n                <span>\n                    Sing Up to a <strong>Harvest</strong> or{' '}\n                    <strong>Forecast</strong> account\n                </span>\n            </div>\n            <AuthWithGoogle login={false} />\n            <LoginTypesSeparator />\n            <EmailPasswordRegistrationForm />\n        </>\n    )\n}\n\nexport default RegistrationPage\n","import React from 'react'\nimport LoginPage from './LoginPage'\nimport EntryWindowContainer from './EntryWindowContainer'\nimport RegistrationPage from './RegistrationPage'\nimport store from '../../store/store'\n\nconst EntryWindow: React.FC = () => {\n    return (\n        <EntryWindowContainer>\n            {store.loginOrRegistration ? <RegistrationPage /> : <LoginPage />}\n        </EntryWindowContainer>\n    )\n}\n\nexport default EntryWindow\n","import React, { lazy } from 'react'\nimport { CHAT_ROUTE, LOGIN_ROUTE, REGISTRATION_ROUTE } from './utils/consts'\nimport EntryPopup from './components/EntryWindow'\n// import Chat from './components/Chat'\n\ninterface IRouteItem {\n    path: string\n    Component: React.FC\n}\n\nconst chat = lazy(() => import('./components/Chat'))\n\nexport const publicRoutes: IRouteItem[] = [\n    {\n        path: LOGIN_ROUTE,\n        Component: EntryPopup,\n    },\n    {\n        path: REGISTRATION_ROUTE,\n        Component: EntryPopup,\n    },\n]\n\nexport const privateRoutes: IRouteItem[] = [\n    {\n        path: CHAT_ROUTE,\n        Component: chat,\n    },\n]\n","import React from 'react'\nimport Button from '@material-ui/core/Button'\nimport { useHistory } from 'react-router-dom'\nimport { observer } from 'mobx-react-lite'\nimport { useAuthState } from 'react-firebase-hooks/auth'\nimport { makeStyles } from '@material-ui/styles'\nimport store from '../../store/store'\nimport { LOGIN_ROUTE, REGISTRATION_ROUTE } from '../../utils/consts'\n\nconst useStyles = makeStyles({\n    header: {\n        width: '100%',\n        display: 'flex',\n        justifyContent: 'space-between',\n    },\n    myButton: {\n        margin: '10px 0',\n        backgroundColor: '#09B83E',\n        '&:hover': {\n            backgroundColor: '#099336',\n        },\n    },\n})\n\nconst Header: React.FC = observer(() => {\n    const { loginOrRegistration, auth } = store\n    const classes = useStyles()\n    const [user] = useAuthState(auth)\n    const { name } = store.getUsersInfo\n    const history = useHistory()\n    const handleClick = () => {\n        store.setLoginOrRegistration()\n        history.push(loginOrRegistration ? LOGIN_ROUTE : REGISTRATION_ROUTE)\n    }\n\n    const singOutHandler = () => {\n        if (auth) {\n            auth.signOut().then(() => store.userLogOut())\n        }\n    }\n\n    return (\n        <header className={classes.header}>\n            {!user && (\n                <Button className={classes.myButton} onClick={handleClick}>\n                    {loginOrRegistration ? 'Sing In' : 'Sing Up'}\n                </Button>\n            )}\n            {user && (\n                <Button className={classes.myButton} onClick={singOutHandler}>\n                    Sing Out\n                </Button>\n            )}\n            <Button>{name}</Button>\n        </header>\n    )\n})\n\nexport default Header\n","import React from 'react'\nimport './styles.css'\n\nconst Loader: React.FC = () => {\n    return (\n        <div id=\"cupcake\" className=\"box\">\n            <span className=\"letter\">L</span>\n\n            <div className=\"cupcakeCircle box\">\n                <div className=\"cupcakeInner box\">\n                    <div className=\"cupcakeCore box\" />\n                </div>\n            </div>\n\n            <span className=\"letter box\">A</span>\n            <span className=\"letter box\">D</span>\n            <span className=\"letter box\">I</span>\n            <span className=\"letter box\">N</span>\n            <span className=\"letter box\">G</span>\n        </div>\n    )\n}\n\nexport default Loader\n","import React from 'react'\nimport { Route, Switch, Redirect, BrowserRouter } from 'react-router-dom'\nimport { observer } from 'mobx-react-lite'\nimport { privateRoutes, publicRoutes } from '../../routes'\nimport { CHAT_ROUTE, LOGIN_ROUTE } from '../../utils/consts'\nimport store from '../../store/store'\nimport Header from './Header'\nimport Loader from '../Loader/Loader'\n\nconst AppRouter = observer(() => {\n    if (store.getLoading) return <Loader />\n    return (\n        <BrowserRouter>\n            <Header />\n            {store.user ? (\n                <Switch>\n                    {privateRoutes.map(({ path, Component }) => (\n                        <Route\n                            key={path}\n                            path={path}\n                            component={Component}\n                            exact\n                        />\n                    ))}\n                    <Redirect to={CHAT_ROUTE} />\n                </Switch>\n            ) : (\n                <Switch>\n                    {publicRoutes.map(({ path, Component }) => (\n                        <Route\n                            key={path}\n                            path={path}\n                            component={Component}\n                            exact\n                        />\n                    ))}\n                    <Redirect to={LOGIN_ROUTE} />\n                </Switch>\n            )}\n        </BrowserRouter>\n    )\n})\n\nexport default AppRouter\n","import React, { Suspense } from 'react'\nimport AppContainer from './AppContainer'\nimport AppRouter from './AppRouter'\nimport Loader from '../Loader/Loader'\n\nconst Index: React.FC = () => {\n    return (\n        <AppContainer>\n            <Suspense fallback={<Loader />}>\n                <AppRouter />\n            </Suspense>\n        </AppContainer>\n    )\n}\n\nexport default Index\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { createTheme, CssBaseline, ThemeProvider } from '@material-ui/core'\nimport { initializeApp } from 'firebase/app'\nimport { getAuth } from 'firebase/auth'\nimport { getFirestore } from 'firebase/firestore'\nimport store from './store/store'\nimport App from './components/App'\n\nconst theme = createTheme({\n    overrides: {\n        MuiCssBaseline: {\n            '@global': {\n                html: {\n                    width: '100%',\n                    height: '100%',\n                },\n                body: {\n                    margin: 0,\n                    padding: 0,\n                    width: '100%',\n                    height: '100%',\n                    backgroundColor: '#455A64',\n                },\n                '#root': {\n                    height: '100%',\n                },\n            },\n        },\n    },\n})\n\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    projectId: process.env.REACT_APP_AUTH_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_APP_ID,\n}\n\ninitializeApp(firebaseConfig)\nstore.setCurrentAuth(getAuth())\nstore.setDB(getFirestore())\n\nReactDOM.render(\n    <React.StrictMode>\n        <ThemeProvider theme={theme}>\n            <CssBaseline />\n            <App />\n        </ThemeProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}